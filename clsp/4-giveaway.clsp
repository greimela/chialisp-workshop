(mod (MOD_HASH PAYOUT_HEIGHT PUZZLE_HASHES mode my_amount puzzle_hash_to_add)
    (include condition_codes.clib)
    (include curry.clib)
    (include sha256tree.clib)

    (defun-inline build_puzzle_hash (MOD_HASH PUZZLE_HASHES)
        (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree PUZZLE_HASHES)
        )
    )

    ; could be passed in via solution to reduce cost
    (defun-inline count_entries (PUZZLE_HASHES)
        (if PUZZLE_HASHES
            (+ 1 (count_entries (r PUZZLE_HASHES)))
            0
        )
    )

    (defun-inline calculate_amount_per_entry (total_amount number_of_shares)
        (f (divmod total_amount number_of_shares))
    )

    (defun create_payout_coins (PUZZLE_HASHES amount_per_entry)
        (if PUZZLE_HASHES
            (c
                (list
                    CREATE_COIN
                    (f PUZZLE_HASHES)
                    amount_per_entry
                    (list (f PUZZLE_HASHES))
                )
                (create_payout_coins
                    (r PUZZLE_HASHES)
                    amount_per_entry
                )
            )
            ()
        )
    )

    (if (= mode 1)
        (c ; mode 1 == payout
            (list ASSERT_HEIGHT_ABSOLUTE PAYOUT_HEIGHT)
            (c
                (list ASSERT_MY_AMOUNT my_amount)
                (create_payout_coins PUZZLE_HASHES (calculate_amount_per_entry my_amount (count_entries PUZZLE_HASHES)))
            )
        )
        (list
            (list ASSERT_MY_AMOUNT my_amount)
            (list CREATE_COIN (build_puzzle_hash MOD_HASH (c puzzle_hash_to_add PUZZLE_HASHES)) my_amount)
        )
    )
)